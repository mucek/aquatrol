Build1=Default,b4a.example3
File1=1.bal
File2=Connnections.bal
FileGroup1=Default Group
FileGroup2=Default Group
Group=Default Group
IconFile=
Library1=core
Library2=ble2
Library3=xui
Library4=stringutils
Library5=runtimepermissions
Library6=xcustomlistview
Library7=ime
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: http://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="5" android:targetSdkVersion="26"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~'End of default text.~\n~AddPermission(android.permission.ACCESS_COARSE_LOCATION)
Module1=Starter
NumberOfFiles=2
NumberOfLibraries=7
NumberOfModules=1
Version=8.5
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: BLE_TRANSPARENT_UART
	#VersionCode: 1
	#VersionName: 
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
' Dim Scan_Timer As Timer
End Sub

Sub Globals
	Private btnReadData As Button
	Private btnDisconnect As Button
	Private btnScan As Button
	Private lblDeviceStatus As Label
	Private lblState As Label
	Private pbReadData As ProgressBar
	Private pbScan As ProgressBar
	Private clv As CustomListView
	Private Button_SEND As Button
	Private txtLogs As EditText
	Private ListView_Connections As ListView
	
End Sub 

Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("1")
'	Activity.RemoveAllViews
'	Scan_Timer.Initialize("Scan_Timer", 1000)
'	Scan_Timer.Enabled = True
	Activity.LoadLayout("Connnections")

End Sub

Private Sub IME_HeightChanged (NewHeight As Int, OldHeight As Int)
	txtLogs.SetLayoutAnimated(200, txtLogs.Left, txtLogs.Top, txtLogs.Width, NewHeight - 5dip - txtLogs.Top)
End Sub

Sub Activity_Resume
	
	StateChanged
End Sub

Public Sub StateChanged
	lblState.Text = Starter.currentStateText
	If Starter.connected Then
		lblDeviceStatus.Text = "Connected: " & Starter.ConnectedName
	Else
		lblDeviceStatus.Text = "Not connected"
	End If
	btnDisconnect.Enabled = Starter.connected
	btnScan.Enabled = Not(Starter.connected)
	pbReadData.Visible = False
	pbScan.Visible = False
	btnReadData.Enabled = Starter.connected
	btnScan.Enabled = (Starter.currentState = Starter.manager.STATE_POWERED_ON) And Starter.connected = False
End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub

Sub Scan
	Starter.rp.CheckAndRequest(Starter.rp.PERMISSION_ACCESS_COARSE_LOCATION)
	Wait For Activity_PermissionResult (Permission As String, Result As Boolean)
	If Result = False Then Return
	pbScan.Visible = True
	CallSub(Starter, "StartScan")
End Sub

Sub btnScan_Click
Scan
End Sub

'Sub Scan_Timer_Tick
'	Scan
'	If Starter.ConnectedName <> "" Then
'		Log(Starter.ConnectedName)
'	End If
'	Starter.ConnectedName = ""
'	'Log("Tick")
'	
'End Sub


Sub DataAvailable (Service As String, Characteristics As Map)
	pbReadData.Visible = False
	clv.Add(CreateServiceItem(Service), "")
	For Each id As String In Characteristics.Keys
		clv.Add(CreateCharacteristicItem(id, Characteristics.Get(id)), "")
	Next
End Sub

Sub btnDisconnect_Click
	CallSub(Starter, "Disconnect")
End Sub

Sub btnReadData_Click
	pbReadData.Visible = True
	clv.Clear
	CallSub(Starter, "ReadData")
End Sub

Sub CreateServiceItem (service As String) As Panel
	Dim pnl As Panel
	pnl.Initialize("")
	pnl.Color = 0xFF808080
	pnl.SetLayoutAnimated(0, 0, 0, clv.AsView.Width, 30dip)
	Dim lbl As Label
	lbl.Initialize("")
	lbl.Text = service
	lbl.Gravity = Gravity.CENTER
	lbl.Typeface = Typeface.DEFAULT_BOLD
	pnl.AddView(lbl, 0, 0, clv.AsView.Width, 30dip)
	Return pnl
End Sub

Sub CreateCharacteristicItem(Id As String, Data() As Byte) As Panel
	Dim pnl As Panel
	pnl.Initialize("")
	pnl.SetLayoutAnimated(0, 0, 0, clv.AsView.Width, 40dip)
	pnl.Color = Colors.White
	Dim lbl As Label
	lbl.Initialize("")
	lbl.Text = Id
	pnl.AddView(lbl, 0, 0, clv.AsView.Width, 20dip)
	Dim lbl2 As Label
	lbl2.Initialize("")
	Try
		lbl2.Text = BytesToString(Data, 0, Data.Length, "UTF8")
	Catch
		Log(LastException)
		lbl2.Text = "Error reading data as string"
	End Try
	lbl2.TextColor = 0xFF909090
	lbl2.TextSize = 14
	pnl.AddView(lbl2, 0, 20dip, clv.AsView.Width, 20dip)
	Return pnl
End Sub

Public Sub NewMessage(msg() As Byte)
	txtLogs.Text = BytesToString(msg, 0, msg.Length, "utf8") & CRLF & txtLogs.Text
End Sub

Sub Button_SEND_Click
	
	Dim s As String = "DATA TO SEND GOES HERE" 
	CallSub2(Starter, "SendMessage", s.GetBytes("utf8"))

End Sub

